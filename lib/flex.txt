  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  垂直和水平放置多个widget
  最常见的布局模式之一是垂直或水平排列widget。可以使用行Row水平排列widget,并使用Column垂直排列widget
  重点：1.行和列是两种最常用的布局模式 2.行和列都需要一个字widget列表 3.子widget本身可以是行、列或其他复杂widget 4.可以指定行或列如何在垂直或水平向上对齐其子项
        5.可以拉伸或限制特定的子widget  6.可以指定子widget如何使用行或列的可用空间


  对齐widgets

  可以控制行或列如何使用mainAxisAlignment和crossAxisAlignment属性来对齐其子项。对于行(Row)来说，主轴是水平方向，横轴垂直方向。
  对于列(Column)来说，主轴垂直方向，横轴水平方向

  MainAxisAlignment和crossAxisAlignment类提供了很多控制对齐的变量
  注意： 将图片添加到项目时，需要更新pubspec文件才能访问它们--此示例使用Image.asset显示图像
  如果使用网上的图片，则不需要执行此操作，使用Image.network即可

  在以下示例中，3个图像中的每一个都是100像素宽，渲染盒宽度超过300个像素，因此设置主轴对齐方式为spaceEvenly，它会在每个图像之间，之前和之后均匀分配空闲的水平空间

  appBar: new AppBar(
    title: new Text(widget.title),
  ),
  body: new Center(
    child: new Row(
      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
      children: [
        new Image.asset('images/pic1.jpg'),
      ]
    )
  )

  列的工作方式和行相同。以下示例显示了一列，包含3个图片，每个图片高100个像素。渲染盒（在这种情况下，整个屏幕）的高度大于300像素，因此设置主轴对齐方式为
  spaceEvenly，它会在每个图像之间，上方和下方均匀分配空闲的垂直空间

  appBar: new AppBar(
    title: new Text(widget.title),
  ),
  body: new Center(
    child: new Column(
      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
      children: [
        new Image.assets('images/pic1.jpg'),
      ]
    )
  )






  调整widget

  如果想要一个widget占据其兄弟widget两倍的空间。可以将行或列的子项放置在Expandedwidget中，以控制沿着主轴方向的widget大小。
  Expanded widget具有一个flex属性，它是一个整数，用于确定widget的弹性系数，默认弹性系数是1

  例如，要创建一个由三个widget组成的行，其中中间widget的宽度是其他两个widget的两倍，将中间widget的弹性系数设置为2：

  appBar: new AppBar(
    title: new Text(widget.title),
  ),
  body: new Center(
    child: new Row(
      crossAxisAlignment: CrossAxisAlignment.center,
      children: [
        new Expanded(
          child: new Image.asset('images/pic1.jpg),
        ),
        new Expanded(
          flex: 2,
          child: new Image.asset('images/pic2.jpg),
        ),

      ]
    )
  )





  聚集widgets

  默认情况下，行或列沿着其主轴会尽可能占用尽可能多的空间，但如果要将这些紧密聚集在一起时，可以将mainAxisSize设置为MainAxisSize.min

  class _MyHomePageState extends State<MyHomePage> {
    @override
    Widget build(BuildContext context) {
      var packedRow = new Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          new Icon(Icons.star, color: Colors.green[500]),
          new Icon(Icons.star, color: Colors.green[500]),
          new Icon(Icons.star, color: Colors.green[500]),
          new Icon(Icons.star, colro: Colors.black),
          new Icon(Icons.star, colro: Colors.black),
        ],
      ),
      // ...

    }
  }






  嵌套行和列----布局框架允许根据需要在行和列

    class MyHomePage extends StatefulWidget {
      @override
      createState () => new _MyHomePageState();
    }

    
    class _MyHomePageState extends State<MyHomePage> {
      @override
      Widget build(BuildContext context) {
        //...
        var ratings = new Container(
          padding: new EdgeInsets.all(20.0),
          child: new Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              new Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  new Icon(Icons.star, color: Colors.black),
                  new Icon(Icons.star, color: Colors.black),
                  new Icon(Icons.star, color: Colors.black),
                  new Icon(Icons.star, color: Colors.black),
                  new Icon(Icons.star, color: Colors.black),
                ],
              ),
              new Text(
                '170 Reviews',
                style: new TextStyle(
                  color: Colors.black,
                  fontWeight: FontWeight.w800,
                  fontFamily: 'Roboto',
                  letterSpacing: 0.5,
                  fontSize: 20.0
                ),
              )
            ],
          ),
        );
      }
    }

  该iconList变量定义了图标行
    class  _MyHomePageState extends State<MyHomePage> {
      @override
      Widget build(BuildContext context) {
        // ...
        var descTextStyle = new TextStyle(
          color: Colors.black,
          fontWeight: FontWeight.w800,
          fontFamily: 'Roboto',
          letterSpacing: 0.5,
          fontSize: 18.0,
          height: 2.0,
        );

        // DefaultTextStyle.merge可以允许创建一个默认的文本样式，该样式会被其所有的子节点继承
        var iconList = DefaultTextStyle.merge(
          style: descTextStyle,
          child: new Container(
            padding: new EdgeInsets.all(20.0),
            child: new Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                new Column(
                  children: [
                    new Icon(Icons.kitchen, color: Colors.green[500]),
                    new Text('PREP:'),
                    new Text('25 min'),
                  ],
                ),
                new Column(
                  children: [
                    new Icon(Icons.timer, color: Colors.green[500]),
                    new Text('COOK:'),
                    new Text('1 hr'),
                  ],
                ),
                new Column(
                  children: [
                    new Icon(Icons.restaurant, color: Colors.green[500]),
                    new Text('FEEDS:'),
                    new Text('4-6'),
                  ],
                )
              ]
            )
          )
        );

      // ...


      }
    }


    该leftColumn变量包含评分和图标行，以及描述Pavlova的标题和文字:
    class _MyHomePageState extends State<MyHomePage> {
      @override
      Widget build(BuildContext context) {
        // ...
        var leftColumn = new Container(
          padding: new EdgeInsets.fromLTRB(20.0, 30.0, 20.0, 20.0),
          child: new Column(
            children: [
              titleText,
              subTitle,
              ratings,
              iconList,
            ],
          ),
        );
      // ...

      }
    }


    左列放置在容器中以约束其宽度。最后，用整个行（包含左列和图像）放置在一个Card内构建UI：

    Pavlova图片来自Pixabay,可以在Creative Commons许可下使用。可以使用Image.network直接从网上下载显示图片，但对于此示例，图像保存到项目中的图像目录中，
    添加到pubspec文件，并使用Images.asset。

    body: new Center(
      child: new Container(
        margin: new EdgeInsets.fromLTRB(0.0, 40.0, 0.0, 30.0),
        height: 600.0,
        child: new Card(
          child: new Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              new Container(
                width: 440.0,
                child: leftColumn,
              ),
              mainImage,
            ],
          ),
        ),
      ),
    ),
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  常用布局widgets

  Flutter拥有丰富的布局widget,但这里有一些最常用的布局widget。其目的是尽可能快地构建应用并运行。

  以下widget分为两类：widget library中的标准widget和Material Components library中的专用widget。任何应用程序都可以使用widgets library中的widget,
  但只有Material应用程序可以使用Material Components库

  标准widgets

    Container  ---添加padding/margins/borders/background color,或将其他装饰添加到widget

    GridView   ---将widgets排列为可滚动的网格

    ListView   ---将widget排列为可滚动列表

    Stack      ---将widget重叠在另一个widget之上

  Material Components

    Card       ---将相关内容放到带圆角和投影的盒子中

    ListTitle  ---将最多3行文字，以及可选的行前和行尾的图标排成一行


  Container
      ---许多布局会自由使用容器来使用padding分隔widget，或者添加边框（border）或边距（margin）
      ---可以通过将整个布局放入容器并更改其背景颜色或图片来更改设备的背景

    Container概要：
      1.添加padding/margins/borders
      2.改变背景颜色或图片
      3.包含单个子widget，但该子widget可以是Row,Column,甚至是widget树的根

    Container示例
      该布局中每个图像使用一个Container来添加一个圆形的灰色边框和边距。然后使用容器将列背景颜色更改为浅灰色


    class _MyHomePageState extends State<MyHomePage> {
      @override
      Widget build(BuildContext context) {
        var container = new Container(
          decoration: new BoxDecoration(
            color: Colors.black26,
          ),
          child: new Column(
            children: [
              new Expanded(
                child: new Container(
                  decoration: new BoxDecoration(
                    border: new Border.all(width: 10.0, color: Colors.black38),
                    borderRadius:
                      const BorderRadius.all(const Radius.circular(8.0)),
                  ),
                  margin: const EdgeInsets.all(4.0),
                  child: new Image.asset('images/pic1.jpg'),
                ),
              ),
              new Expanded(
                child: new Container(
                  decoration: new BoxDecoration(
                    border: new Border.all(width: 10.0, color: Colors.black38),
                    borderRadius:
                      const BorderRadius.all(const Radius.circular(8.0)),
                  ),
                  margin: const EdgeInsets.all(4.0),
                  child: new Image.asset('images/pic2.jpg'),
                ),
              ),
            ],
          ),

          // ...
        )
      }
    }


  GridView
    --使用GridView将widget放置为二维列表。GridView提供了两个预制list，或者可以构建自定义网格。
    --当GridView检测到其内容太长而不适合渲染框时，它会自动滚动

    GridView概览：
      1.在网格中放置widget
      2.检测列内容超过渲染框时自动提供滚动
      3.构建自己的自定义grid,或使用一下提供的grid之一：
        ①GridView.count允许指定列数
        ②GridView.extent允许指定项的最大像素宽度

      注意：在显示二维列表时，重要的事单元格占用哪一行和哪一列时，应该使用Table或DataTable


    List<Container> _buildGridTileList(int count) {
      return new List<Container>.generate(
        count,
        (int index) =>
          new Container(child: new Image.asset('images/pic${index+1}.jpg'))
      );
    }

    Widget buildGrid() {
      return new GridView.extent(
        maxCrossAxisExtent: 150.0,
        padding: const EdgeInsets.all(4.0),
        mainAxisSpacing: 4.0,
        crossAxisSpacing: 4.0,
        children: _buildGridTileList(30)
      );
    }

    class _MyHomePageState extends State<MyHomePage> {
      @override
      Widget build(BuildContext context) {
        return new Scaffold(
          appBar: new AppBar(
            title: new Text(widget.title),
          ),
          body: new Center(
            child: buildGrid(),
          ),
        );
      }
    }


  ListView
    ---ListView是一个类似列的widget,它的内容对于其渲染框太长时会自动提供滚动

    ListView摘要：
      1.用于组织盒子中列表的特殊Column
      2.可以水平或垂直放置
      3.检测它的内容超过显示框时提供滚动
      4.比Column配置少,但更易于使用并支持滚动

    ListView示例：

      List<Widget> list = <Widget> [
        new ListTile(
          title: new Text('CineArts at the Empire',
            style: new TextStyle(fontWeight: FontWeight.w500, fontSize: 20.0)),
          subtitle: new Text('85 W Portal Ave'),
          leading: new Icon(
            Icons.theators,
            color: Colors.blue[500],
          ),
        ),

        new ListTile(
          title: new Text('The Castro Theater',
            style: new TextStyle(fontWeight: FontWeight.w500, fontSize: 20.0)),
          subtitle: new Text('429 Castro St'),
          leading: new Icon(
            Icons.theators,
            color: Colors.blue[500],
          ),
        ),

        // ...

      ];


      class _MyHomePageState extends State<MyHomePage> {
        @override
        Widget build(BuildContext context) {
          return new Scaffold(
            // ...
            body: new Center(
              child: new ListView(
                children: list,
              ),
            ),
          );
        }
      }



  Stack
    --使用Stack来组织需要重叠的widget。widget可以完全或部分重叠底部widget

    Stack summary:
      1.用于与另一个widget重叠的widget
      2.子列表中的第一个widget是base widget;随后的子widget被覆盖在基础widget的顶部
      3.Stack的内容不能滚动
      4.可以选择剪切超过渲染框的子项

    Stack 示例：

      class _MyHomePageState extends State<MyHomePage> {
        @override
        Widget build(BuildContext context) {
          var stack = new Stack(
            alignment: const Alignment(0.6, 0.6),
            children: [
              new CircleAvatar(
                backgroundImage: new AssetImage('images/pic.jpg'),
                radius: 100.0,
              ),

              new Container(
                decoration: new BoxDecoration(
                  color: Colors.black45,
                ),
                child: new Text(
                  'Mia B',
                  style: new TextStyle(
                    fontSize: 20.0,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ),

            ],
          ),
          // ...
        }
      }


  Card
    ---Material Components库中的Card包含相关内容块，可以由大多数类型的widget构成，但通常与ListTile一起使用。Card有一个子项，但它可以是支持多个子项的列，行，列表，网格
    或其他小部件。默认情况下，Card将其大小缩小为0像素。可以使用SizedBox来限制Card的大小。

    在Flutter中，Card具有圆角和阴影，这使它有一个3D效果。更改Card的elevation属性允许控制投影效果。例如，将elevation设置为24.0，将会使Card从视觉上抬离表面并使阴影变得
    更加分散。

    Card摘要：
      1.实现了一个Material Design Card
      2.接受单个子项，但该子项可以是Row，Column或其他包含子集列表的widget
      3.显示圆角和阴影
      4.Card内容不能滚动
      5.Material Components库的一个widget

    Card示例：

      clsss _MyHomePageState extends State<MyHomePage> {
        @override
        Widget build(BuildContext context) {
          var card = new SizedBox(
            height: 210.0,
            child: new Card(
              child: new Column(
                children: [
                  new ListTile(
                    title: new Text('1625 Main Street',
                      style: new TextStyle(fontWeight: FontWeight.w500)),
                    subtitle: new Text('My City, CA 99984'),
                    leading: new Icon(
                      Icons.restaurant_menu,
                      color: Colors.blue[500],
                    ),
                  ),

                  new Divider(),
                  new ListTile(
                    title: new Text('(408) 555-1212',
                      style: new TextStyle(fontWeight: FontWeight.w500)),
                    leading: new Icon(
                      Icons.contact_phone,
                      color: Colors.blue[500],
                    ),
                  ),

                  new ListTile(
                    title: new Text('costa@example.com'),
                    leading: new Icon(
                      Icons.contact_mail,
                      color: Colors.blue[500],
                    ),
                  ),

                ],
              ),
            ),
          );

          // ...
        }
      }



  ListTile
    ---ListTile是Material Components库中的一个专门的行级widget，用于创建包含最多3行文本和可选的行前和行尾图标的行。ListTile在Card或ListView中最常用，但也可以在别处使用

    ListTile摘要：
      1.包含最多3行文本和可选图标的专用行
      2.比起Row不易配置，但更易于使用
      3.Material Components库里的widget

    ListTile示例：

      